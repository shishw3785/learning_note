python简介
	连google都在大规模使用,不用担心学了没用
	当用一种语言开始软件开发时,除了编写代码外,还需要很多基本已经这好的东西加速开发,如开发一个邮件客户端,如果从最底层开始编写网络协议相关的代码可能要一年多也不行.高级语言通常会提供一个比较完善的基础代码库,可以直接调用.如由件协议的SMTP库,我们就可以在现有代码库上开发,短时间就能写邮件客户端软件出来

	python提供了非常完善的基础代码库,包括网络,文件,GUI,数据库等和第三方库,可以直接使用

	优点
		简洁,高效
	缺点
		运行速度慢,因为是解释型语言,代码在执行时会一行一行地翻译成CPU能理解的机器码

python解释器
	当编写python代码时,得到的是一个.py扩展名的文本文件,要运行代码,就需要python解释器去执行

	官网安装Python后就得到了一个官方解释器材cpython(使用最广),用c语言开发,在命令行下python就启动cpython了

输入和输出
	>>> print('hello, world')
	hello, world

	>>> print('hello', 'world')
	hello world    #print接受多个字符,用逗号隔开,打印时每遇一个, 就会输出一个空格

	print()也可以打印整数，或者计算结果：

	>>> print(300)
	300
	>>> print(100 + 200)
	300

	>>> print('100 + 200 =', 100 + 200)
	100 + 200 = 300

	输入
	>>> name = input()
	Michael
	>>> name
	'Michael'

	>>> name = input('please enter your name: ') #显示字符串提醒
	please enter your name: leison
	>>> print('hello', name)
	hello leison

python基础
	任何一种语言都有一套语法,编译器或解释器就是把符合语法的代码转译给CPU能识别的机器码

	# 开头是注释
	每一行都是一个语句,语句以冒号 : 结尾时,缩进的语句称为代码块,应以4个空格缩进,好处是让长语句缩短成短语句,缺点是复制后的代码要重新检验缩进标准

	数据类型
		Python能直接处理的数据类型
			整数
				可以处理任意大意的整数,包括负整数
					1 100 -8 0
				十六进制
					十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。

			浮点数
				1.23，3.14，-9.01
				很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等

				整数和浮点数在计算机内部存储方式不同,整数是精确的,而浮点数有时要四舍五入

			字符串
				以'' 或 "" 括起来的任意文本
					'abc'
					"Im' ok" # 单引号本身也是字符,用双引号括起来,里面的空格也是字符

				转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\\表示的字符就是\，可以在Python的交互式命令行用print()打印字符串看看：

				>>> print('I\'m ok.')
				I'm ok.
				>>> print('I\'m learning\nPython.')
				I'm learning
				Python.
				>>> print('\\\n\\')
				\
				\
				如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r''表示''内部的字符串默认不转义，可以自己试试：

				>>> print('\\\t\\')
				\       \
				>>> print(r'\\\t\\')
				\\\t\\

				如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用'''...'''的格式表示多行内容，可以自己试试：

				>>> print('''line1
				... line2
				... line3''')
				line1
				line2
				line3
cookie与session
	两个都是会话跟踪机制,因为http是无状态的协议,所以保持会话状态十分重要

	cookie是类似服务器给各客户端发送证书牌号来标识区分客户端来识别客户端,cookie数据存储在客户端的机子上

	session是服务器通过某种形式记录各客户端的信息(类似客户端表格),通过cookie的帮助,session的数据是存放在服务器上

	session比cooki安全,因为cooki的数据是存放在客户端上,可能会被修改,cooki的数据也可以加密


python
	pop(), 列表删除 l.pop()默认删除最后一个, l.pop(2) 删除索引2的数据
		   字典删除   d.pop('key') 索引KEY值来删除

 	字典    判断 key存在   'key' in dic   或  d.get('key') 存在就返回其值,不返在则什么都不显示
 			d.get('key', -1)  不存在自定义返回值

 	集合    s = set([1,2,3]) 定义集合
 			s.add('元素')
 			s.remove('元素')



 CGI
 	web服务器只能处理静态内容,动态内容需要web应用程序处理(php,python,java),web服务器通过CGI协议来把动态请求传给web应用程序

 	换句话说,通过CGI协议与搭建好的web应用程序,那web server就'可以'处理动态请求

 	常用于编写CGI的语言有perl、php、python等，java也一样能写，但java的servlet完全能实现CGI的功能，且更优化、更利于开发。

	cgi：它是一种协议。通过cgi协议，web server可以将动态请求和相关参数发送给专门处理动态内容的应用程序。
	fastcgi：也是一种协议，只不过是cgi的优化版。cgi的性能较烂，fastcgi则在其基础上进行了改进。
	php-cgi：fastcgi是一种协议，而php-cgi实现了这种协议。不过这种实现比较烂。它是单进程的，一个进程处理一个请求，处理结束后进程就销毁。
	php-fmp：是对php-cgi的改进版，它直接管理多个php-cgi进程/线程。也就是说，php-fpm是php-cgi的进程管理器因此它也算是fastcgi协议的实现。在一定程度上讲，php-fpm与php的关系，和tomcat对java的关系是类似的。



geoip2 nginx地区限制IP
	https://www.jianshu.com/p/84610a65398c

	https://github.com/leev/ngx_http_geoip2_module

	GEOIP2数据库可以在maxmind.com 免费下载(要注册登录)

在python与shell  '' ' ' 或 "" " " 是不相等的,一个中间有空格,空字符判断用 '' 或 ""






对称加密
	加密解密都是用同一个KEY

非对称加密
	公key加密私key解密
	私key加密公key解密

摘要
	经过hash算法(等)生成的长字符串

数字签名
	用自己的私key自对摘要加密生成的数据
	作用确保发送方的身份与数据的完整性
	如
		A要发送邮件内容('abc...')给B, 可以将内容hash后生成的摘要h1,用A的私key对h1加密成数字签名,然后把内容,数据签名与自己的公key发送给B,B收到后用同样的hash算法对内容进行计算得到h2摘要,再用公KEY解密数字签名得到摘要h1, h1 与 h2 一致就说明验证了数据的来源与完整

数字证书
	以上A发送给B里就一个隐患,就是有可能C拿到A的公钥来冒冲A与B通信,所以可以通过数字证书来解决

	A向CA证书中心申请数字证书(CA用自己的私KEY加密的数字证书,里面包启A的相关信息与A的公KEY与证书过期时间等),A将内容与数字签名, 数字证书一起发给B, B本身有CA的公KEY,对数字证书解密拿到认证后的A的公KEY,继续上述的流程

https
	服务器给客户端发送自己的数字证书(有公KEY),浏览器帮验证证书拿到server 公key，客户端协商生成一个对称加密key,然后通过公key对对称key加密后传给server端,之后都是用对称key传输数据

	https里 数据传输是用对称加密key, 非对称加密是用来加密传输对称key的



python参数组合
	在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。



在python中，一切皆对象。数字、字符串、元组、列表、字典、函数、方法、类、模块等等都是对象，包括你的代码。


linux    less可以读取文件或标准输出,可上下翻查,可查关键字     ps aux | less

内核文件位置
				/boot 名为vmlinuz


centos 8 重启网络
	nmcli networking off && nmcli networking on 



ICMP报文件为IP层数据报的数据加上数据报的首部,组成IP数据报发送出去

多播一般用于直播,网络会议等,能够节省带宽
IGMP协议的作用就是周期性扫描本网段内有没有主机在访问多播数据包


python
	把list、dict、str等Iterable变成Iterator可以使用iter()函数：

		>>> isinstance(iter([]), Iterator)
		True
		>>> isinstance(iter('abc'), Iterator)
		True



str bytes 序列化区别

	序列化可以把任何对象转换成bytes

	在将字符串存入磁盘和从磁盘读取字符串的过程中，Python自动地帮你完成了编码和解码的工作，你不需要关心它的过程。

	使用bytes类型，实质上是告诉Python，不需要它帮你自动地完成编码和解码的工作，而是用户自己手动进行，并指定编码格式。

编码
	计算机只认识0与1,那要处理文本的内容就要把文本转化成计算机能识别的0和1,早期美国的ASCII编码,如A的编码为65,用一个字节(255最多)来表示英文与字符,但处理中文字符一个字符是不行的,至少需要两个字节而且不能与ASCII冲突,所以中国的制定的编码为GB2312,各国都有自己的编码所以就会出现乱码问题

	因此，Unicode字符集应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。

	Unicode标准也在不断发展，但最常用的是UCS-16编码，用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。

	如果把ASCII编码的A用Unicode编码，只需要在前面补0就可以，因此，A的Unicode编码是00000000 01000001
	如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。

	又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间

	字符		ASCII		Unicode				UTF-8
	A		01000001	00000000 01000001	01000001
	中		x			01001110 00101101	11100100 10111000 10101101
	从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。

	在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码

POSIX
	可移植操作系统接口,是IEEE要在各种UNIX操作系统上运行软件而定义API的一系列相关的标准


linux
	[root@localhost ~]# ls -l crontab 
	-rw-r--r--. 2 root root 451 May 11  2019 crontab
	# 第二栏为链接数,如是文件的说说明有两个文件名连接到同一个inode(有硬链接),如是目录,新建的目录链接数是2,而对应上层的的目录链接数加1

	挂载文件系统时,centos会自动分析文件系统种类尝试挂载(文件系统的超级区块与自己的驱动程序(位置 /lib/modules/$(uname -r)/kernel/fs去测试)

	交换分区swap文件系统也是要开机启动(/etc/fstab)

	[root@localhost ~]# ll -sh
	total 1.5M
	4.0K -rw-r--r--. 1 root root  288 Sep 18 14:54 1.py
	......
	#total值是文件数据区块数量 * 区块大小值

	zcat/zless/zmore 可以查看.gz压缩文件

	xz -k abc.txt  # xz也是压缩命令, -k可以在压缩后同时保留源文件

	用tar备份比某个时刻要新的文件

		tar -zcvf something.tar.gz --newer-mtime="20200801" /etc  #打包比0801要新的mtime文件
		tar -ztvf something.tar.gz | grep -v "/$"  # 找出非/结尾的就是文件
git
	git log 显示最近到最远的提交日志

	HEAD -> 表示当前版本
	HEAD^  上一版本
	HEAD^^  上上版本

	指向版本
		git reset --hard commit_id
		git reset --hard HEAD^ 退回到上一版本

	查看提交历史,以便回到哪个版本
		git log

	要回到最新的版本就要指向最新的commit ID
		git reflog 查看命令历史


	工作区就是电脑上的目录，如learning目录，.git目录是版本库,暂存区就是index或stage.
		步聚
			git add 把文件添加到暂存区
			git commit 把文件从暂存区提交到当前分支(git创建版本库时自动创建了一个master分支)

			可以理解为工作区文件修改通通添加到暂存区，然后一次性提交所有修改到分支

			日常操作
				git add .           #一次性添加所有修改文件到暂存区
				git commit -m "修改内容"

	git跟踪并管理的是修改
	git commit 只负责把暂存区的修改提交到分之

	git checkout -- file   把文件在工作区的修改全部撤消
		file修改没添加到暂存区,checkout后file恢复成与版本库一样的状态
		file修改后已添加到暂存区,又对了file做修改, checkout后file恢得到添加到暂存区后的状态

	暂存区的修改撤消
		假如已经把readme.txt add到暂存区了
		git reset HEAD readme.txt #丢弃暂存区readme的修改
		然后就可以继续丢弃工作区的readme.txt


	删除文件
		本地删除test.txt,远程仓库删除文件 git rm test.txt,并且要commit
		如果误删除本地test.txt,可以git checkout -- test.txt恢复





	本地库关联远程仓库
		git remote add origin git@server-name:path/repo-name.git
		第一次推送
			git push -u origin master #之后推送不用-u

	本地克隆远程仓库
		git clone git@egegegegeeg.git
		clone支持https和ssh协议,ssh速度，https每次推送需要账密

	分支
		查看分支 git branch
		创建分支 git branch <name> 或 git switch <name>
		切换分支 git checkout <name> 或 git switch <name>
		创建加切换分支  git checkout <name> 或 git switch -c <name>
		合并分支到当前分支  git merge <name>
			如当前分支为master,合并dev到当前分支
			git merge dev
		删除分支 git branch -d <dev>

		冲突
			GIT无法自动合并分支时，必须先解决冲突文件(手动修改文件内容一样)。解决冲突后，先提交后再合并.

			git log --graph 查看分支合并图

普通合并，不使用fast forward合并
master为主分支,dev分支有作了修改，切换回master后
git merge --no-ff -m "修改信息" dev

查看历史合并信息
git log --graph --pretty=oneline --abbrev-commit
#普通合并能看出分支合并信息, fast forward不行

保存现场
	如在dev分支上正在进行代码工作，此时master要改临时的bug，所以先要保存dev的工作现场(dev已添加修改到暂存区，不添加保存不了现场)
	git stash
	Saved working directory and index state WIP on dev: f52c633 add merge

	保存后就切换到master分支然后创建临时分支issue-1,在issu-1分支上修改完后再切回master分支普通合并issue分支

	然后再切换到dev分支
	git stash list 查看保存的工作现场

	恢复工作现场
		git stash pop #恢复的同时把stash内容也删除

	最后因为dev分支是从master出来的,dev分支上也同样有bug，此时需要把master修复的提效复制到dev
	git cherry-pick <commit ID>

强行删除没有合并的分支
	git branch -D commit_ID   #开发一个新的feature(功能)最好新建一个分支.若新分支修改完成后没有被合并到分支(如dev)就要删除，要加上 -D




推送分支
git push origin master #推送本地master分支到远程origin库
git push origin dev   #推送本地开发分支到远程origin库

本地创建和远程分支对应的分支，如dev分支#默认clone时只创建master对应
	创建dev对应
		git checkout -b dev origin/dev

	多人协作
		1 首先，先试图用git push origin 分支到远程仓库
		2 如果推送失败，则是因为远程仓库分比本地要新，则先git pull试图将远程库分支合并到本地
		3 如果合并有冲突，先解决冲突后在本地commit提交，最后就能push到远程分支

		如果git pull 提示no tracking information,则说明本地分支与远程会支的链路接关系没有创建。
			用命令git branch --set-upstream-to=origin/dev dev
			dev为分支

	标签
		git tag <tagname> 用于新建标签 ，默认最新HEAD，也可以指定COMMIT_ID
		git tag -a <tagname> -m "信息" 指定标签信息

		git tag #查看所有标签
		git show <tagname> #查看标签信息
		标签与commit_id挂钩,如果这个commit有master与dev分支，则两个分支都可以看到标签 

		推送一个本地tag到远程
			git push origin <tagname>
		推送全部未推送的标签到远程
			git push origin --tags
		本地删除一个标签 
			git tag -d <tagname>
		删除远程标签 
			先在本地删除
			git push origin :refs/tags/<tagname>
		分支与标签很像，但分支可以移动，标签不行

	.gitignore
		忽回文件原则
			1 忽略系统自动生成的文件，比如缩略图等
			2 忽略包含敏感信息文件，比如方账密或数据库文件
			3 忽略编译产生的中间文件，可执行文件

		如果你确实想添加该文件，可以用-f强制添加到Git：

		$ git add -f App.class
		或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：

		$ git check-ignore -v App.class
		.gitignore:3:*.class	App.class


	git reset --hard commitid 指向某一版本
	git checkout -- file
